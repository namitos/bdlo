<div class='row'>
	<div class='col-md-12 list-schemas'></div>
</div>

<div class='row'>
	<div class='col-sm-3 collection-list'></div>
	<div class='col-sm-9'>
		<div class='form-group form-schema-new'></div>
		<div class='form-schema'></div>
	</div>
</div>
<script>
var schemas = <%= JSON.stringify(conf.editableSchemas) %>;
var toLoad = {};
for (var key in schemas) {
	toLoad[key] = schemas[key].hasOwnProperty('path') ? schemas[key].path : '/core/schemas/' + key + '.js';
}


function resizeList($list) {
	if ($(window).width() > 767) {
		if ($(window).width() > 992) {
			$list.height($(window).height() - 150);
		}else{
			$list.height($(window).height() - 200);
		}
	} else {
		$list.height(141);
	}
}

load(toLoad, function (result) {
	for (var key in schemas) {
		schemas[key].schema = result[key];
	}

	var schemasMenuHtml = "<ul class='nav nav-tabs'>";
	for (var key in schemas) {
		schemasMenuHtml += "<li><a href='#s/" + key + "/new'>" + schemas[key].name + "</a></li>";
	}
	schemasMenuHtml += "</ul>";
	var $listSchemas = $('.list-schemas');
	$listSchemas.html(schemasMenuHtml);
	$listSchemas.on('click', 'li', function () {
		$('li', $listSchemas).removeClass('active');
		$(this).addClass('active');
	});


	var ObjModel = Backbone.Model.extend({
		idAttribute: '_id'
	});
	var ObjCollectionList = Backbone.View.extend({
		className: "collection-list",
		fetchCollection: function () {
			var fieldsToFetch = {};
			fieldsToFetch[schemas[this.options.schemaName].titleField] = true;
			this.collection.fetch({
				data: {
					fields: fieldsToFetch
				}
			});
		},
		initialize: function (input) {
			this.options = input.options;
			var _this = this;
			var ObjCollection = Backbone.Collection.extend({
				model: ObjModel,
				url: function () {
					return '/admin/rest/' + _this.options.schemaName;
				}
			});
			this.collection = new ObjCollection();
			this.collectionFullObj = new ObjCollection();

			this.collection.bind('sync', this.render, this);
			this.collection.bind('destroy', this.render, this);
			this.collectionFullObj.bind('sync', this.fetchCollection, this);
			this.collectionFullObj.bind('destroy', this.fetchCollection, this);
		},
		render: function () {
			var schemaName = this.options.schemaName;
			var listHtml = "<ul class='list-group'>";
			this.collection.toJSON().forEach(function (obj) {
				if (obj.hasOwnProperty('_id')) {
					listHtml += "<li class='list-group-item'><a href='#s/" + schemaName + "/" + obj._id + "'>" + obj[schemas[schemaName].titleField] + "</a></li>";
				}
			});
			listHtml += "</ul>";
			if (this.collection.length > 0) {
				this.$el.html(listHtml);
				resizeList($('.list-group', this.$el));

			} else {
				this.$el.html("<div class='alert alert-info'>No documents</div>");
			}

		}
	});

	$(window).on('resize', function () {
		resizeList($('.list-group', $('.collection-list')));
	});

	var views = {};

	var schemasRoute = Backbone.Router.extend({
		listView: function (schemaName) {
			var list = new ObjCollectionList({
				el: $('.collection-list'),
				options: {
					schemaName: schemaName
				}
			});
			list.fetchCollection();
			return list;
		},
		routes: {
			's/:schemaName': function (schemaName) {
				//views[schemaName] = this.listView(schemaName);
				this.navigate("s/" + schemaName + "/new", {trigger: true});
			},
			's/:schemaName/:id': function (schemaName, id) {
				var routerItem = this;

				function loadVocabularies(schemaName, callback) {
					toLoad = [];
					_.forIn(schemas[schemaName].schema.properties, function (schemaPart, key) {//вытаскивание промисов на загрузку словарей надо сделать рекурсивно из всех схемы, а не только из первого уровня
						if (schemaPart.type == 'any' && schemaPart.hasOwnProperty('info') && schemaPart.info.hasOwnProperty('type') && schemaPart.info.type == 'select' && schemaPart.info.hasOwnProperty('schema')) {
							toLoad.push({
								obj: schemaPart,
								url: '/admin/rest/' + schemaPart.info.schema
							});
						}
					});
					load(toLoad, function (result) {
						_.forIn(result, function (loadedItem, key) {
							var options = {};
							loadedItem.result.forEach(function (vocabularyItem) {
								options[vocabularyItem._id] = vocabularyItem[schemas[loadedItem.obj.info.schema].titleField];
							});
							loadedItem.obj.info.options = options;
						});
						callback();
					});
				}

				loadVocabularies(schemaName, function () {
					$('.form-schema-new').html("<a class='btn btn-info' href='#s/" + schemaName + "/new'><span class='glyphicon glyphicon-plus'></span> New</a>");
					if (views.hasOwnProperty(schemaName)) {
						views[schemaName].fetchCollection();
					} else {
						views[schemaName] = routerItem.listView(schemaName);
					}
					var view = views[schemaName];

					function getObj(id, callback) {
						var obj;
						if (id == 'new') {
							obj = view.collectionFullObj.add(new ObjModel());
							callback(obj);
						} else {
							view.collectionFullObj.fetch({
								data: {
									_id: id
								},
								complete: function () {
									obj = view.collectionFullObj.get(id);
									callback(obj ? obj : false);
								}
							});
						}
					};
					getObj(id, function (obj) {
						var html;
						if (obj) {
							var options = {
								template: function (obj) {
									var buttons = [];
									if (obj.hasOwnProperty('_id')) {
										buttons.push("<button type='button' class='btn btn-danger delete'><span class='glyphicon glyphicon-minus'></span> Delete</button>");
									}
									buttons.push("<button type='button' class='btn btn-primary save'><span class='glyphicon glyphicon-save'></span> Save</button>");
									var $wrapper = $("<div></div>");
									$wrapper.append(schemaHelper.form(schemas[schemaName].schema, obj));
									$wrapper.append("<div class='btn-group'>" + buttons.join('') + "</div>");
									return $wrapper;
								},
								saveSuccess: function (obj) {
									window.location.hash = 's/' + schemaName + '/' + obj.id;
								},
								afterRender: function (view) {
									view.$el.find('input[type=dateUnixtime]').each(function () {
										var $input = $(this);
										$input.hide().after("<div></div>").next().datepicker({
											dateFormat: $.datepicker.TIMESTAMP,
											onSelect: function (val) {
												$(this).prev().val(val).change();
											}
										});
										$input.next().datepicker('setDate', new Date(parseInt($input.val())));
									});
								}
							};
							if (schemas[schemaName].hasOwnProperty('presave')) {
								options.presave = schemas[schemaName].presave;
							}
							var formView = new FormRowView({
								model: obj,
								options: options
							});
							html = formView.render().el;
						} else {
							html = "<div class='alert alert-danger'>Object is not exists</div>";
						}
						$('.form-schema').html(html);
					});

				});


			}
		}
	});
	var app = new schemasRoute();
	Backbone.history.start();


});

</script>
